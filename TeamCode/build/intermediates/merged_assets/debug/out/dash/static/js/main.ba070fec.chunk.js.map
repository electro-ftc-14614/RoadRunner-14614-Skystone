{"version":3,"sources":["containers/canvas.js","assets/field.png","components/Heading.jsx","components/Header.jsx","components/IconGroup.jsx","components/Icon.jsx","components/TileGrid.jsx","components/Tile.jsx","enums/OpModeStatus.js","containers/OpModeView.jsx","actions/opmode.js","components/AutoFitCanvas.jsx","containers/CameraView.jsx","components/MultipleCheckbox.jsx","containers/Graph.js","containers/GraphCanvas.jsx","components/inputs/TextInput.jsx","components/inputs/validation.js","containers/GraphView.jsx","containers/types.js","components/inputs/BooleanInput.jsx","components/inputs/EnumInput.jsx","enums/VariableType.js","containers/BasicVariable.jsx","containers/CustomVariable.jsx","containers/ConfigView.jsx","actions/config.js","containers/TelemetryView.jsx","containers/Field.js","containers/FieldView.jsx","enums/LayoutPreset.jsx","actions/gamepad.js","actions/socket.js","actions/status.js","actions/settings.js","containers/Dashboard.jsx","enums/GamepadType.js","middleware/socketMiddleware.js","middleware/gamepadMiddleware.js","middleware/storageMiddleware.js","reducers/telemetry.js","actions/telemetry.js","reducers/socket.js","reducers/config.js","reducers/status.js","reducers/camera.js","actions/camera.js","reducers/settings.js","reducers/gamepad.js","reducers/index.js","configureStore.js","index.js"],"names":["alignCoord","x","scaling","roundX","Math","round","sign","CanvasRenderingContext2D","prototype","getScalingFactors","transform","arr","this","getTransform","mozCurrentTransform","Error","window","DOMMatrix","fromFloat64Array","Float64Array","from","a","b","c","d","scalingX","sqrt","scalingY","fineMoveTo","y","moveTo","fineLineTo","lineTo","module","exports","Heading","children","text","level","className","React","createElement","Header","IconGroup","Icon","icon","size","opacity","onClick","style","TileGrid","gridTemplate","Tile","row","col","gridRow","gridColumn","Object","freeze","INIT","RUNNING","STOPPED","OpModeView","props","state","selectedOpMode","onChange","bind","evt","setState","target","value","margin","dispatch","type","opModeName","activeOpMode","activeOpModeStatus","opModeList","length","renderInitButton","OpModeStatus","renderStartButton","renderStopButton","available","warningMessage","errorMessage","gamepad1Connected","gamepad2Connected","disabled","sort","map","opMode","key","renderButtons","indexOf","Component","connect","status","gamepad","AutoFitCanvas","resize","addEventListener","removeEventListener","canvas","innerRef","current","width","parentElement","clientWidth","devicePixelRatio","height","clientHeight","onResize","ref","ForwardedAutoFitCanvas","forwardRef","displayName","CameraView","canvasRef","createRef","renderImage","image","Image","onload","rotation","ctx","getContext","src","imageStr","viewportWidth","viewportHeight","scale","min","translate","rotate","PI","drawImage","camera","MultipleCheckbox","selected","val","checked","filter","el","exclude","handleChange","DEFAULT_OPTIONS","windowMs","colors","lineWidth","padding","keySpacing","keyLineLength","gridLineWidth","gridLineColor","fontSize","textColor","maxTicks","niceNum","range","exponent","floor","log10","fraction","pow","getAxisScaling","max","tickSpacing","spacing","formatTicks","tickValue","ticks","delta","abs","logDelta","tickString","numDecimal","toFixed","fromLow","fromHigh","toLow","toHigh","Graph","options","cloneDeep","assign","clear","time","datasets","lastSampleTime","sample","lastSimTime","Date","now","push","color","i","name","data","j","Number","MAX_VALUE","MIN_VALUE","o","font","textBaseline","textAlign","keyHeight","renderKey","renderGraph","save","numSets","lineY","lineX","measureText","strokeStyle","beginPath","stroke","fillStyle","fillText","restore","shift","graphHeight","axis","getAxis","tickStrings","s","getTicks","axisWidth","renderAxisLabels","graphWidth","renderGridLines","renderGraphLines","textWidth","vertSpacing","numTicksX","numTicksY","horSpacing","rect","clip","GraphCanvas","paused","handleDocumentKeydown","graph","document","requestId","cancelAnimationFrame","forEach","addSample","code","render","requestAnimationFrame","TextInput","inputRef","handleKeyDown","setCustomValidity","valid","validated","validate","onSave","keyCode","onKeyDown","validateDouble","test","parseFloat","validateInt","parseInt","validateString","GraphView","PropTypes","arrayOf","shape","log","string","isRequired","object","timestamp","number","graphing","keys","handleClick","stopGraphing","startGraphing","telemetry","latestPacket","graphData","packet","includes","isNaN","marginTop","BooleanInput","EnumInput","enumValues","enumValue","BOOLEAN","INT","DOUBLE","STRING","ENUM","CUSTOM","BasicVariable","input","enumClass","modified","optionOnChange","__type","__value","__valid","optionOnSave","__enumClass","VariableType","userSelect","CustomVariable","expanded","toggleVisibility","sortedKeys","child","newValue","__newValue","__enumValues","__modified","config","onRefresh","configDiff","saveConfig","updateConfig","configRoot","getModifiedDiff","baseConfig","root","modifiedConfig","subConfig","entries","telemetryLines","telemetryLog","line","fieldImage","fieldsToRender","fieldLoaded","field","fieldImageName","alpha","fieldSize","splineSamples","Field","overlay","ops","renderField","globalAlpha","renderOverlay","lineCap","op","arc","radius","fill","xPoints","yPoints","closePath","ax","bx","cx","dx","ex","fx","ay","by","cy","dy","ey","fy","t","sx","sy","FieldView","setOverlay","fieldOverlay","lastGamepad1","lastGamepad2","lastGamepadTimestamp","LayoutPreset","DEFAULT","FIELD","GRAPH","ORIGINAL","LAYOUT_DETAILS","content","getName","preset","getContent","host","port","receiveConnectionStatus","isConnected","receiveLayoutPreset","Dashboard","location","hostname","process","layoutPreset","pingTime","reduxConnect","socket","settings","gamepadConnected","user","gamepadDisconnected","sendGamepadState","gamepad1","gamepad2","isEqual","receiveGamepadState","statusSentTime","GamepadType","LOGITECH_DUAL_ACTION","XBOX_360","UNKNOWN","getFromGamepad","id","search","getJoystickDeadzone","gamepadType","isSupported","oldMin","oldMax","newMin","newMax","cleanMotionValues","joystickDeadzone","maxMotionRange","REST_GAMEPAD_STATE","left_stick_x","left_stick_y","right_stick_x","right_stick_y","dpad_up","dpad_down","dpad_left","dpad_right","guide","start","back","left_bumper","right_bumper","left_stick_button","right_stick_button","left_trigger","right_trigger","extractGamepadState","axes","buttons","pressed","gamepad1Index","gamepad2Index","gamepadMiddleware","store","index","updateGamepads","gamepads","navigator","getGamepads","connected","gamepadState","gamepad1State","gamepad2State","setTimeout","next","action","socketMiddleware","WebSocket","onmessage","msg","JSON","parse","onopen","robotStatusLoop","getState","onclose","close","receivePingTime","send","stringify","storageMiddleware","localStorage","getItem","setItem","initialState","receiveConfig","newConfig","mergedConfig","refreshConfig","refreshedConfig","imageString","combineReducers","configureStore","middlewares","thunk","createStore","reducer","applyMiddleware","apply","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.ba070fec.chunk.js","sourcesContent":["// align coordinate to the nearest pixel, offset by a half pixel\n// this helps with drawing thin lines; e.g., if a line of width 1px\n// is drawn on an integer coordinate, it will be 2px wide\n// x is assumed to be in *device* pixels\nfunction alignCoord(x, scaling) {\n  const roundX = Math.round(x * scaling);\n  return (roundX + 0.5 * Math.sign(x - roundX)) / scaling;\n}\n\nfunction arrToDOMMatrix(arr) {\n  return window.DOMMatrix.fromFloat64Array(Float64Array.from(arr));\n}\n\nCanvasRenderingContext2D.prototype.getScalingFactors = function() {\n  let transform;\n  if (typeof this.getTransform === 'function') {\n    transform = this.getTransform();\n  } else if (typeof this.mozCurrentTransform !== 'undefined') {\n    transform = arrToDOMMatrix(this.mozCurrentTransform);\n  } else {\n    throw new Error('unable to find canvas transform');\n  }\n  \n  const { a, b, c, d } = transform;\n  const scalingX = Math.sqrt(a * a + c * c);\n  const scalingY = Math.sqrt(b * b + d * d);\n\n  return {\n    scalingX, \n    scalingY\n  };\n};\n\nCanvasRenderingContext2D.prototype.fineMoveTo = function(x, y) {\n  const { scalingX, scalingY } = this.getScalingFactors();\n  this.moveTo(alignCoord(x, scalingX), alignCoord(y, scalingY));\n};\n\nCanvasRenderingContext2D.prototype.fineLineTo = function(x, y) {\n  const { scalingX, scalingY } = this.getScalingFactors();\n  this.lineTo(alignCoord(x, scalingX), alignCoord(y, scalingY));\n};","module.exports = __webpack_public_path__ + \"static/media/field.1f32ba9a.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Heading = ({ children, text, level }) => (\n  <div className=\"heading\">\n    {React.createElement(`h${level}`, null, text)}\n    {children}\n  </div>\n);\n\nHeading.propTypes = {\n  children: PropTypes.node,\n  text: PropTypes.string.isRequired,\n  level: PropTypes.number.isRequired\n};\n\nexport default Heading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => (\n  <header>{children}</header>\n);\n\nHeader.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst IconGroup = ({ children }) => (\n  <div className=\"icon-group\">\n    { children }\n  </div>\n);\n\nIconGroup.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default IconGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Icon = ({ icon, size, opacity, onClick }) => (\n  <div style={{ opacity: opacity || 1.0 }} className={`icon ${icon} ${size}`} onClick={onClick} />\n);\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  size: PropTypes.string.isRequired,\n  opacity: PropTypes.number,\n  onClick: PropTypes.func\n};\n\nexport default Icon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TileGrid = ({ gridTemplate, children }) => (\n  <div className=\"tile-grid\" style={{ gridTemplate }}>{children}</div>\n);\n\nTileGrid.propTypes = {\n  gridTemplate: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport default TileGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tile = ({ children, row, col }) => (\n  <div\n    className=\"tile\"\n    style={{\n      gridRow: row,\n      gridColumn: col,\n    }}>\n    { children }\n  </div>\n);\n\nTile.propTypes = {\n  children: PropTypes.node.isRequired,\n  row: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string\n  ]).isRequired,\n  col: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string\n  ]).isRequired\n};\n\nexport default Tile;\n","const OpModeStatus = {\n  INIT: 'INIT',\n  RUNNING: 'RUNNING',\n  STOPPED: 'STOPPED'\n};\n\nexport default Object.freeze(OpModeStatus);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Heading from '../components/Heading';\nimport { initOpMode, startOpMode, stopOpMode } from '../actions/opmode';\nimport OpModeStatus from '../enums/OpModeStatus';\nimport Icon from '../components/Icon';\nimport IconGroup from '../components/IconGroup';\n\nconst STOP_OP_MODE = '$Stop$Robot$';\n\nclass OpModeView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOpMode: ''\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.activeOpMode !== STOP_OP_MODE) {\n      return {\n        selectedOpMode: props.activeOpMode\n      };\n    } else if (state.selectedOpMode === '' || \n        props.opModeList.indexOf(state.selectedOpMode) === -1) {\n      return {\n        selectedOpMode: props.opModeList[0] || ''\n      };\n    } else {\n      return {};\n    }\n  }\n\n  onChange(evt) {\n    this.setState({\n      selectedOpMode: evt.target.value\n    });\n  }\n\n  renderInitButton() {\n    return <button style={{margin: '4px'}} onClick={() => this.props.dispatch(initOpMode(this.state.selectedOpMode))}>Init</button>;\n  }\n\n  renderStartButton() {\n    return <button style={{margin: '4px'}} onClick={() => this.props.dispatch(startOpMode())}>Start</button>;\n  }\n\n  renderStopButton() {\n    return <button style={{margin: '4px'}} onClick={() => this.props.dispatch(stopOpMode())}>Stop</button>;\n  }\n\n  renderButtons() {\n    const { activeOpMode, activeOpModeStatus, opModeList } = this.props;\n\n    if (opModeList.length === 0) {\n      return null;\n    } else if (activeOpMode === STOP_OP_MODE) {\n      return this.renderInitButton();\n    } else if (activeOpModeStatus === OpModeStatus.INIT) {\n      return (\n        <span>\n          {this.renderStartButton()}\n          {this.renderStopButton()}\n        </span>\n      );\n    } else if (activeOpModeStatus === OpModeStatus.RUNNING) {\n      return this.renderStopButton();\n    } else if (activeOpModeStatus === OpModeStatus.STOPPED) {\n      return null;\n    } else {\n      return <p>Unknown op mode status: {activeOpModeStatus}</p>;\n    }\n  }\n\n  render() {\n    const { available, activeOpMode, opModeList, warningMessage, errorMessage } = this.props;\n\n    const { gamepad1Connected, gamepad2Connected } = this.props;\n\n    if (!available) {\n      return (\n        <div>\n          <Heading level={2} text=\"Op Mode\" />\n          <p>Event loop detached</p>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <Heading level={2} text=\"Op Mode\">\n          <IconGroup>\n            <Icon opacity={ gamepad1Connected ? 1.0 : 0.3 } icon=\"gamepad\" size=\"small\" />\n            <Icon opacity={ gamepad2Connected ? 1.0 : 0.3 } icon=\"gamepad\" size=\"small\" />\n          </IconGroup>\n        </Heading>\n        <select style={{ margin: '4px' }} \n          value={this.state.selectedOpMode} \n          disabled={ activeOpMode !== STOP_OP_MODE || opModeList.length === 0 } \n          onChange={this.onChange}>\n          {\n            opModeList.length === 0 ?\n              (<option>Loading...</option>) :\n              opModeList\n                .sort()\n                .map((opMode) => (\n                  <option key={opMode}>{opMode}</option>\n                ))\n          }\n        </select>\n        {this.renderButtons()}\n        {\n          errorMessage !== '' ?\n            <p className=\"error\">Error: {errorMessage}</p> : null\n        }\n        {\n          warningMessage !== '' ?\n            <p className=\"warning\">Warning: {warningMessage}</p> : null\n        }\n      </div>\n    );\n  }\n}\n\nOpModeView.propTypes = {\n  available: PropTypes.bool.isRequired, \n  activeOpMode: PropTypes.string.isRequired,\n  activeOpModeStatus: PropTypes.oneOf(Object.keys(OpModeStatus)),\n  opModeList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  warningMessage: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  gamepad1Connected: PropTypes.bool.isRequired,\n  gamepad2Connected: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = ({ status, gamepad }) => ({\n  ...status,\n  ...gamepad\n});\n\nexport default connect(mapStateToProps)(OpModeView);\n","export const INIT_OP_MODE = 'INIT_OP_MODE';\nexport const START_OP_MODE = 'START_OP_MODE';\nexport const STOP_OP_MODE = 'STOP_OP_MODE';\n\nexport const initOpMode = (opModeName) => ({\n  type: INIT_OP_MODE,\n  opModeName\n});\n\nexport const startOpMode = () => ({\n  type: START_OP_MODE\n});\n\nexport const stopOpMode = () => ({\n  type: STOP_OP_MODE\n});","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AutoFitCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resize = this.resize.bind(this);\n  }\n\n  componentDidMount() {\n    this.resize();\n    window.addEventListener('resize', this.resize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resize);\n  }\n\n  resize() {\n    const canvas = this.props.innerRef.current;\n    canvas.width = canvas.parentElement.clientWidth * devicePixelRatio;\n    canvas.height = canvas.parentElement.clientHeight * devicePixelRatio;\n    canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n    canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n\n    if (this.props.onResize) {\n      this.props.onResize();\n    }\n  }\n\n  render() {\n    return <canvas ref={this.props.innerRef} />;\n  }\n}\n\nAutoFitCanvas.propTypes = {\n  innerRef: PropTypes.any.isRequired,\n  onResize: PropTypes.func\n};\n\nconst ForwardedAutoFitCanvas = React.forwardRef((props, ref) => <AutoFitCanvas innerRef={ref} {...props} />);\nForwardedAutoFitCanvas.displayName = 'AutoFitCanvas';\nexport default ForwardedAutoFitCanvas;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Heading from '../components/Heading';\nimport AutoFitCanvas from '../components/AutoFitCanvas';\nimport IconGroup from '../components/IconGroup';\nimport Icon from '../components/Icon';\n\nclass CameraView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n\n    this.renderImage = this.renderImage.bind(this);\n\n    this.image = new Image();\n    this.image.onload = this.renderImage;\n\n    this.state = {\n      rotation: 0\n    };\n  }\n\n  componentDidMount() {\n    this.ctx = this.canvasRef.current.getContext('2d');\n  }\n\n  componentDidUpdate() {\n    this.image.src = `data:image/jpeg;base64,${this.props.imageStr}`;\n  }\n\n  renderImage() {\n    if (this.ctx) {\n      const canvas = this.canvasRef.current;\n\n      // eslint-disable-next-line\n      canvas.width = canvas.width; // clears the canvas\n\n      const viewportWidth = canvas.width;\n      const viewportHeight = canvas.height;\n\n      // rotate the image\n      const scale = Math.min(devicePixelRatio,\n        (this.state.rotation % 2 === 0 ? viewportHeight : viewportWidth) / this.image.height,\n        (this.state.rotation % 2 === 0 ? viewportWidth : viewportHeight) / this.image.width);\n      this.ctx.translate(viewportWidth / 2, viewportHeight / 2);\n      this.ctx.rotate(this.state.rotation * Math.PI / 2);\n      this.ctx.scale(scale, scale);\n      this.ctx.drawImage(this.image, -this.image.width / 2, -this.image.height / 2, this.image.width, this.image.height);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Heading level={2} text=\"Camera\" >\n          <IconGroup>\n            <Icon onClick={() => this.setState({ rotation: (this.state.rotation + 1) % 4 })} icon=\"refresh\" size=\"small\" />\n          </IconGroup>\n        </Heading>\n        <div className=\"canvas-container\">\n          <AutoFitCanvas ref={this.canvasRef} onResize={this.renderImage} />\n        </div>\n      </div>\n    );\n  }\n}\n\nCameraView.propTypes = {\n  imageStr: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = ({ camera }) => ({\n  imageStr: camera.imageStr\n});\n\nexport default connect(mapStateToProps)(CameraView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MultipleCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: this.props.selected || [],\n    };\n  }\n\n  handleChange(evt, val) {\n    if (evt.target.checked) {\n      this.setState({\n        selected: [...this.state.selected, val],\n      }, () => this.props.onChange(this.state.selected));\n    } else {\n      this.setState({\n        selected: this.state.selected.filter(el => val !== el),\n      }, () => this.props.onChange(this.state.selected));\n    }\n  }\n\n  render() {\n    return (\n      <table className=\"multiple-checkbox\">\n        <tbody>\n          {\n            this.props.arr\n              .filter(val => !this.props.exclude || this.props.exclude.indexOf(val) === -1)\n              .map(val => (\n                <tr key={val}>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      onChange={evt => this.handleChange(evt, val)}\n                      checked={this.state.selected.indexOf(val) !== -1} />\n                  </td>\n                  <td>{val}</td>\n                </tr>\n              ))\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nMultipleCheckbox.propTypes = {\n  arr: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string),\n  exclude: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func // TODO: fix!\n};\n\nexport default MultipleCheckbox;\n","import { cloneDeep } from 'lodash';\nimport './canvas';\n\n// all dimensions in this file are *CSS* pixels unless otherwise stated\nexport const DEFAULT_OPTIONS = {\n  windowMs: 5000,\n  colors: [\n    '#2979ff',\n    '#dd2c00',\n    '#4caf50',\n    '#7c4dff',\n    '#ffa000',\n  ],\n  lineWidth: 2,\n  padding: 15,\n  keySpacing: 4,\n  keyLineLength: 12,\n  gridLineWidth: 1, // device pixels\n  gridLineColor: 'rgb(120, 120, 120)',\n  fontSize: 14,\n  textColor: 'rgb(50, 50, 50)',\n  maxTicks: 7\n};\n\nfunction niceNum(range, round) {\n  const exponent = Math.floor(Math.log10(range));\n  const fraction = range / Math.pow(10, exponent);\n  let niceFraction;\n  if (round) {\n    if (fraction < 1.5) {\n      niceFraction = 1;\n    } else if (fraction < 3) {\n      niceFraction = 2;\n    } else if (fraction < 7) {\n      niceFraction = 5;\n    } else {\n      niceFraction = 10;\n    }\n  } else if (fraction <= 1) {\n    niceFraction = 1;\n  } else if (fraction <= 2) {\n    niceFraction = 2;\n  } else if (fraction <= 5) {\n    niceFraction = 5;\n  } else {\n    niceFraction = 10;\n  }\n  return niceFraction * Math.pow(10, exponent);\n}\n\n// interesting algorithm (see http://erison.blogspot.nl/2011/07/algorithm-for-optimal-scaling-on-chart.html)\nfunction getAxisScaling(min, max, maxTicks) {\n  const range = niceNum(max - min, false);\n  const tickSpacing = niceNum(range / (maxTicks - 1), true);\n  const niceMin = Math.floor(min / tickSpacing) * tickSpacing;\n  const niceMax = (Math.floor(max / tickSpacing) + 1) * tickSpacing;\n  return {\n    min: niceMin,\n    max: niceMax,\n    spacing: tickSpacing\n  };\n}\n\n// shamelessly stolen from https://github.com/chartjs/Chart.js/blob/master/src/core/core.ticks.js\nfunction formatTicks(tickValue, ticks) {\n  // If we have lots of ticks, don't use the ones\n  let delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n  if (Math.abs(delta) > 1) {\n    if (tickValue !== Math.floor(tickValue)) {\n      // not an integer\n      delta = tickValue - Math.floor(tickValue);\n    }\n  }\n\n  const logDelta = Math.log10(Math.abs(delta));\n  let tickString = '';\n\n  if (tickValue !== 0) {\n    let numDecimal = -1 * Math.floor(logDelta);\n    numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n    tickString = tickValue.toFixed(numDecimal);\n  } else {\n    tickString = '0'; // never show decimal places for 0\n  }\n\n  return tickString;\n}\n\nfunction getTicks(axis) {\n  // get tick array\n  const ticks = [];\n  for (let i = axis.min; i <= axis.max; i += axis.spacing) {\n    ticks.push(i);\n  }\n\n  // generate strings\n  const tickStrings = [];\n  for (let i = 0; i < ticks.length; i++) {\n    const s = formatTicks(ticks[i], ticks);\n    tickStrings.push(s);\n  }\n\n  return tickStrings;\n}\n\nfunction scale(value, fromLow, fromHigh, toLow, toHigh) {\n  const frac = (toHigh - toLow) / (fromHigh - fromLow);\n  return toLow + frac * (value - fromLow);\n}\n\nexport default class Graph {\n  constructor(canvas, options) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n\n    this.options = cloneDeep(DEFAULT_OPTIONS);\n    Object.assign(this.options, options || {});\n\n    this.clear();\n  }\n\n  clear() {\n    this.time = [];\n    this.datasets = [];\n    this.lastSampleTime = 0;\n  }\n\n  addSample(sample) {\n    if (this.lastSampleTime === 0) {\n      this.lastSimTime = Date.now() + 250;\n      this.time.push(this.lastSimTime);\n      let color = 0;\n      for (let i = 0; i < sample.length; i++) {\n        if (sample[i].name === 'time') {\n          this.lastSampleTime = sample[i].value;\n        } else {\n          this.datasets.push({\n            name: sample[i].name,\n            data: [sample[i].value],\n            color: this.options.colors[color % this.options.colors.length],\n          });\n          color++;\n        }\n      }\n    } else {\n      for (let i = 0; i < sample.length; i++) {\n        if (sample[i].name === 'time') {\n          this.lastSimTime += (sample[i].value - this.lastSampleTime);\n          this.time.push(this.lastSimTime);\n          this.lastSampleTime = sample[i].value;\n        } else {\n          for (let j = 0; j < this.datasets.length; j++) {\n            if (sample[i].name === this.datasets[j].name) {\n              this.datasets[j].data.push(sample[i].value);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  getAxis() {\n    // get y-axis scaling\n    let min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n    for (let i = 0; i < this.datasets.length; i++) {\n      for (let j = 0; j < this.datasets[i].data.length; j++) {\n        const val = this.datasets[i].data[j];\n        if (val > max) {\n          max = val;\n        }\n        if (val < min) {\n          min = val;\n        }\n      }\n    }\n    if (Math.abs(min - max) < 1e-6) {\n      return getAxisScaling(min - 1, max + 1, this.options.maxTicks);\n    }\n    return getAxisScaling(min, max, this.options.maxTicks);\n  }\n\n  render() {\n    const o = this.options;\n\n    // eslint-disable-next-line\n    this.canvas.width = this.canvas.width; // clears the canvas\n\n    // scale the canvas to facilitate the use of CSS pixels\n    this.ctx.scale(devicePixelRatio, devicePixelRatio);\n\n    this.ctx.font = `${o.fontSize}px \"Roboto\", sans-serif`;\n    this.ctx.textBaseline = 'middle';\n    this.ctx.textAlign = 'left';\n    this.ctx.lineWidth = o.lineWidth / devicePixelRatio;\n\n    const width = this.canvas.width / devicePixelRatio;\n    const height = this.canvas.height / devicePixelRatio;\n    const keyHeight = this.renderKey(0, 0, width);\n    this.renderGraph(0, keyHeight, width, height - keyHeight);\n  }\n\n  renderKey(x, y, width) {\n    const o = this.options;\n\n    this.ctx.save();\n\n    const numSets = this.datasets.length;\n    const height = numSets * o.fontSize + (numSets - 1) * o.keySpacing;\n    for (let i = 0; i < numSets; i++) {\n      const lineY = y + i * (o.fontSize + o.keySpacing) + o.fontSize / 2;\n      const name = this.datasets[i].name;\n      const color = this.datasets[i].color;\n      const lineWidth = this.ctx.measureText(name).width + o.keyLineLength + o.keySpacing;\n      const lineX = x + (width - lineWidth) / 2;\n\n      this.ctx.strokeStyle = color;\n      this.ctx.beginPath();\n      this.ctx.fineMoveTo(lineX, lineY);\n      this.ctx.fineLineTo(lineX + o.keyLineLength, lineY);\n      this.ctx.stroke();\n\n      this.ctx.fillStyle = o.textColor;\n      this.ctx.fillText(name, lineX + o.keyLineLength + o.keySpacing, lineY);\n    }\n\n    this.ctx.restore();\n\n    return height;\n  }\n\n  renderGraph(x, y, width, height) {\n    const o = this.options;\n    if (this.datasets.length === 0 || this.datasets[0].data.length === 0) {\n      return;\n    }\n\n    // remove old points\n    const now = Date.now();\n    while ((now - this.time[0]) > (o.windowMs + 250)) {\n      this.time.shift();\n      for (let i = 0; i < this.datasets.length; i++) {\n        this.datasets[i].data.shift();\n      }\n    }\n\n    const graphHeight = height - 2 * o.padding;\n\n    const axis = this.getAxis();\n    const ticks = getTicks(axis);\n    const axisWidth = this.renderAxisLabels(x + o.padding, y + o.padding, graphHeight, ticks);\n\n    const graphWidth = width - axisWidth - 3 * o.padding;\n\n    this.renderGridLines(\n      x + axisWidth + 2 * o.padding,\n      y + o.padding,\n      graphWidth,\n      graphHeight,\n      5,\n      ticks.length\n    );\n\n    this.renderGraphLines(\n      x + axisWidth + 2 * o.padding,\n      y + o.padding,\n      graphWidth,\n      graphHeight,\n      axis\n    );\n  }\n\n  renderAxisLabels(x, y, height, ticks) {\n    this.ctx.save();\n\n    let width = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const textWidth = this.ctx.measureText(ticks[i]).width;\n      if (textWidth > width) {\n        width = textWidth;\n      }\n    }\n\n    // draw axis labels\n    this.ctx.textAlign = 'right';\n    this.ctx.fillStyle = this.options.textColor;\n\n    const vertSpacing = height / (ticks.length - 1);\n    x += width;\n    for (let i = 0; i < ticks.length; i++) {\n      this.ctx.fillText(ticks[i], x, y + (ticks.length - i - 1) * vertSpacing);\n    }\n\n    this.ctx.restore();\n\n    return width;\n  }\n\n  renderGridLines(x, y, width, height, numTicksX, numTicksY) {\n    this.ctx.save();\n\n    this.ctx.strokeStyle = this.options.gridLineColor;\n    this.ctx.lineWidth = this.options.gridLineWidth / devicePixelRatio;\n\n    const horSpacing = width / (numTicksX - 1);\n    const vertSpacing = height / (numTicksY - 1);\n\n    for (let i = 0; i < numTicksX; i++) {\n      const lineX = x + horSpacing * i;\n      this.ctx.beginPath();\n      this.ctx.fineMoveTo(lineX, y);\n      this.ctx.fineLineTo(lineX, y + height);\n      this.ctx.stroke();\n    }\n\n    for (let i = 0; i < numTicksY; i++) {\n      const lineY = y + vertSpacing * i;\n      this.ctx.beginPath();\n      this.ctx.fineMoveTo(x, lineY);\n      this.ctx.fineLineTo(x + width, lineY);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  renderGraphLines(x, y, width, height, axis) {\n    const o = this.options;\n    const now = Date.now();\n\n    this.ctx.lineWidth = o.lineWidth;\n\n    this.ctx.save();\n    this.ctx.translate(x, y);\n    this.ctx.rect(0, 0, width, height);\n    this.ctx.clip();\n\n    // draw data lines\n    // scaling is used instead of transform because of the non-uniform stretching warps the plot line\n    this.ctx.beginPath();\n    for (let i = 0; i < this.datasets.length; i++) {\n      const d = this.datasets[i];\n      this.ctx.beginPath();\n      this.ctx.strokeStyle = d.color;\n      this.ctx.fineMoveTo(scale(this.time[0] - now + o.windowMs, 0, o.windowMs, 0, width),\n        scale(d.data[0], axis.min, axis.max, height, 0));\n      for (let j = 1; j < d.data.length; j++) {\n        this.ctx.fineLineTo(scale(this.time[j] - now + o.windowMs, 0, o.windowMs, 0, width),\n          scale(d.data[j], axis.min, axis.max, height, 0));\n      }\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from './Graph';\nimport AutoFitCanvas from '../components/AutoFitCanvas';\n\nclass GraphCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      paused: false,\n    };\n\n    this.canvasRef = React.createRef();\n\n    this.handleDocumentKeydown = this.handleDocumentKeydown.bind(this);\n    this.renderGraph = this.renderGraph.bind(this);\n  }\n\n  componentDidMount() {\n    this.graph = new Graph(this.canvasRef.current, this.props.options);\n    this.renderGraph();\n\n    document.addEventListener('keydown', this.handleDocumentKeydown);\n  }\n\n  componentWillUnmount() {\n    if (this.requestId) {\n      cancelAnimationFrame(this.requestId);\n    }\n\n    document.removeEventListener('keydown', this.handleDocumentKeydown);\n  }\n\n  componentDidUpdate() {\n    this.props.data.forEach(sample => this.graph.addSample(sample));\n  }\n\n  handleDocumentKeydown(evt) {\n    if (evt.code === 'Space') {\n      this.setState({\n        paused: !this.state.paused,\n      }, () => {\n        this.renderGraph();\n      });\n    }\n  }\n\n  renderGraph() {\n    if (!this.state.paused && this.graph) {\n      this.graph.render();\n      this.requestId = requestAnimationFrame(this.renderGraph);\n    }\n  }\n\n  render() {\n    return <AutoFitCanvas ref={this.canvasRef} />;\n  }\n}\n\nGraphCanvas.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    value: PropTypes.number\n  }))).isRequired,\n  options: PropTypes.object\n};\n\nexport default GraphCanvas;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TextInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputRef = React.createRef();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.inputRef.current.setCustomValidity(this.props.valid ? '' : 'Invalid input');\n  }\n\n  handleChange(evt) {\n    const validated = this.props.validate(evt.target.value);\n    if (validated) {\n      this.props.onChange(validated);\n    }\n  }\n\n  handleKeyDown(evt) {\n    if (this.props.onSave && evt.keyCode === 13) {\n      this.props.onSave();\n    }\n  }\n\n  render() {\n    return (\n      <input\n        ref={this.inputRef}\n        type=\"text\"\n        size={15}\n        value={this.props.value}\n        onChange={this.handleChange}\n        onKeyDown={this.handleKeyDown}\n      />\n    );\n  }\n}\n\nTextInput.propTypes = {\n  value: PropTypes.any.isRequired,\n  valid: PropTypes.bool.isRequired,\n  validate: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func\n};\n\nexport default TextInput;\n","// TODO: extract patterns into constants?\n\nexport const validateDouble = (value) => {\n  if (value === ''\n      || /^-0?$/.test(value)\n      || /^-?\\d*\\.([1-9]*0+)*$/.test(value)) {\n    return {\n      value: value,\n      valid: false\n    };\n  } else if (/^-?\\d*\\.?\\d*$/.test(value)) {\n    return {\n      value: parseFloat(value),\n      valid: true\n    };\n  }\n};\n\nexport const validateInt = (value) => {\n  if (value === '-' || value === '') {\n    return {\n      value: value,\n      valid: false\n    };\n  } else if (/^-?\\d*$/.test(value)) {\n    return {\n      value: parseInt(value, 10),\n      valid: true\n    };\n  }\n};\n\nexport const validateString = (value) => {\n  return {\n    value: value,\n    valid: true\n  };\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Heading from '../components/Heading';\nimport MultipleCheckbox from '../components/MultipleCheckbox';\nimport GraphCanvas from './GraphCanvas';\nimport IconGroup from '../components/IconGroup';\nimport Icon from '../components/Icon';\nimport TextInput from '../components/inputs/TextInput';\nimport { validateInt } from '../components/inputs/validation';\nimport { DEFAULT_OPTIONS } from './Graph';\nimport { telemetryType } from './types';\n\nclass GraphView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graphing: false,\n      keys: [],\n      windowMs: {\n        value: DEFAULT_OPTIONS.windowMs,\n        valid: true\n      }\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  startGraphing() {\n    this.setState({\n      graphing: true,\n    });\n  }\n\n  stopGraphing() {\n    this.setState({\n      graphing: false,\n    });\n  }\n\n  handleClick() {\n    if (this.state.graphing) {\n      this.stopGraphing();\n    } else {\n      this.startGraphing();\n    }\n  }\n\n  render() {\n    const { telemetry } = this.props;\n    const latestPacket = telemetry[telemetry.length - 1];\n\n    const graphData = telemetry.map(packet => ([\n      {\n        name: 'time',\n        value: packet.timestamp\n      },\n      ...Object.keys(packet.data)\n        .filter(key => this.state.keys.includes(key))\n        .map(key => {\n          return {\n            name: key,\n            value: parseFloat(packet.data[key])\n          };\n        })\n    ]));\n\n    return (\n      <div>\n        <Heading level={2} text=\"Graph\">\n          <IconGroup>\n            <Icon\n              icon={this.state.graphing ? 'close' : 'chart'}\n              size=\"small\"\n              onClick={this.handleClick} />\n          </IconGroup>\n        </Heading>\n        {\n          this.state.graphing ?\n            <div className=\"canvas-container\">\n              <GraphCanvas\n                data={graphData}\n                options={{ windowMs: this.state.windowMs.valid ?\n                  this.state.windowMs.value : DEFAULT_OPTIONS.windowMs }} />\n            </div>\n            :\n            (\n              <div>\n                <MultipleCheckbox\n                  arr={Object.keys(latestPacket.data)\n                    .filter(key => !isNaN(parseFloat(latestPacket.data[key])))}\n                  onChange={selected => this.setState({ keys: selected })}\n                  selected={this.state.keys} />\n                {\n                  Object.keys(latestPacket.data).length > 0 ?\n                    (\n                      <div style={{ marginTop: '20px' }}>\n                        <Heading level={3} text=\"Options\"/>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>Window (ms)</td>\n                              <td>\n                                <TextInput \n                                  value={this.state.windowMs.value} \n                                  valid={this.state.windowMs.valid} \n                                  validate={validateInt} \n                                  onChange={({ value, valid }) => this.setState({\n                                    windowMs: {\n                                      value,\n                                      valid\n                                    }\n                                  })}/>\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                    )\n                    : <p>Sent telemetry items will appear here for graphing</p>\n                }\n              </div>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nGraphView.propTypes = {\n  telemetry: telemetryType.isRequired\n};\n\nconst mapStateToProps = ({ telemetry }) => ({\n  telemetry\n});\n\nexport default connect(mapStateToProps)(GraphView);\n","import PropTypes from 'prop-types';\n\nexport const telemetryType = PropTypes.arrayOf(PropTypes.shape({\n  log: PropTypes.arrayOf(PropTypes.string).isRequired,\n  data: PropTypes.object.isRequired,\n  timestamp: PropTypes.number.isRequired\n}));","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BooleanInput = ({ value, onChange, onSave }) => (\n  <span>\n    <input type=\"checkbox\" checked={value} onChange={evt => onChange({\n      value: evt.target.checked, \n      valid: true\n    })} />\n    <button onClick={onSave}>Save</button>\n  </span>\n);\n\nBooleanInput.propTypes = {\n  value: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired\n};\n\nexport default BooleanInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EnumInput = ({ value, enumValues, onChange, onSave }) => (\n  <span>\n    <select\n      className=\"valid\"\n      value={value}\n      onChange={evt => onChange({\n        value: evt.target.value, \n        valid: true\n      })}>\n      {\n        enumValues.map(enumValue => (\n          <option key={enumValue} value={enumValue}>\n            {enumValue}\n          </option>\n        ))\n      }\n    </select>\n    <button onClick={onSave}>Save</button>\n  </span>\n);\n\nEnumInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  enumValues: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired\n};\n\nexport default EnumInput;\n","const VariableType = {\n  BOOLEAN: 'boolean',\n  INT: 'int',\n  DOUBLE: 'double',\n  STRING: 'string',\n  ENUM: 'enum',\n  CUSTOM: 'custom'\n};\n\nexport default Object.freeze(VariableType);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BooleanInput from '../components/inputs/BooleanInput';\nimport EnumInput from '../components/inputs/EnumInput';\nimport TextInput from '../components/inputs/TextInput';\nimport VariableType from '../enums/VariableType';\nimport { validateDouble, validateInt, validateString } from '../components/inputs/validation';\n\nclass BasicVariable extends React.Component {\n  render() {\n    const { type, name, value, enumClass, enumValues, modified, valid, onChange, onSave } = this.props;\n\n    const optionOnChange = ({ valid, value }) => {\n      onChange({\n        __type: type,\n        __value: value,\n        __valid: valid\n      });\n    };\n\n    const optionOnSave = () => {\n      if (valid && modified) {\n        onSave({\n          __type: type,\n          __value: value,\n          __valid: true,\n          __enumClass: enumClass\n        });\n      }\n    };\n\n    let input;\n\n    switch (type) {\n    case VariableType.INT:\n      input = <TextInput value={value} valid={valid} validate={validateInt} onChange={optionOnChange} onSave={optionOnSave} />;\n      break;\n    case VariableType.DOUBLE:\n      input = <TextInput value={value} valid={valid} validate={validateDouble} onChange={optionOnChange} onSave={optionOnSave} />;\n      break;\n    case VariableType.STRING:\n      input = <TextInput value={value} valid={valid} validate={validateString} onChange={optionOnChange} onSave={optionOnSave} />;\n      break;\n    case VariableType.BOOLEAN:\n      input = <BooleanInput value={value} onChange={optionOnChange} onSave={optionOnSave} />;\n      break;\n    case VariableType.ENUM:\n      input = <EnumInput value={value} enumValues={enumValues} onChange={optionOnChange} onSave={optionOnSave} />;\n      break;\n    default:\n      input = <p>Unknown option type: {type}</p>;\n    }\n\n    return (\n      <tr>\n        <td><span style={ modified ? {\n          userSelect: 'auto',\n          opacity: 1.0\n        } : {\n          userSelect: 'none',\n          opacity: 0.0\n        }}>*</span>{name}</td>\n        <td>{input}</td>\n      </tr>\n    );\n  }\n}\n\nBasicVariable.propTypes = {\n  type: PropTypes.oneOf(Object.values(VariableType)).isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.any.isRequired,\n  modified: PropTypes.bool.isRequired,\n  valid: PropTypes.bool.isRequired,\n  enumClass: PropTypes.string,\n  enumValues: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default BasicVariable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Heading from '../components/Heading';\nimport Icon from '../components/Icon';\nimport BasicVariable from './BasicVariable';\nimport VariableType from '../enums/VariableType';\n\nclass CustomVariable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false\n    };\n\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n  }\n\n  toggleVisibility() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  }\n\n  render() {\n    const { name, value } = this.props;\n\n    const sortedKeys = Object.keys(value);\n\n    sortedKeys.sort();\n\n    const options = sortedKeys.map((key) => {\n      const child = value[key];\n\n      const onChange = (newValue) => {\n        this.props.onChange({\n          __type: VariableType.CUSTOM,\n          __value: {\n            [key]: newValue\n          }\n        });\n      };\n\n      const onSave = (newValue) => {\n        this.props.onSave({\n          __type: VariableType.CUSTOM,\n          __value: {\n            [key]: newValue\n          }\n        });\n      };\n\n      if (child.__type === VariableType.CUSTOM) {\n        return (\n          <CustomVariable\n            key={key}\n            name={key}\n            value={child.__value}\n            onChange={onChange}\n            onSave={onSave} />\n        );\n      }\n\n      return (\n        <BasicVariable\n          key={key}\n          type={child.__type}\n          name={key}\n          value={child.__newValue}\n          valid={child.__valid}\n          enumClass={child.__enumClass}\n          enumValues={child.__enumValues}\n          modified={child.__modified}\n          onChange={onChange}\n          onSave={onSave} />\n      );\n    });\n\n    return (\n      <tr>\n        <td>\n          <div className=\"option-header\">\n            <Icon icon={ this.state.expanded ? 'expand-less' : 'expand-more' } size=\"tiny\" onClick={this.toggleVisibility} />\n            <Heading text={name} level={3} />\n          </div>\n          {\n            this.state.expanded ?\n              (\n                <table>\n                  <tbody>{options}</tbody>\n                </table>\n              )\n              : null\n          }\n        </td>\n      </tr>\n    );\n  }\n}\n\nCustomVariable.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default CustomVariable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CustomVariable from './CustomVariable';\nimport Heading from '../components/Heading';\nimport IconGroup from '../components/IconGroup';\nimport Icon from '../components/Icon';\nimport { updateConfig, saveConfig, refreshConfig, getModifiedDiff } from '../actions/config';\nimport VariableType from '../enums/VariableType';\n\nconst ConfigView = ({ configRoot, onRefresh, onSave, onChange }) => {\n  const sortedKeys = Object.keys(configRoot.__value || {});\n\n  sortedKeys.sort();\n  \n  return (\n    <div>\n      <Heading level={2} text=\"Configuration\">\n        <IconGroup>\n          <Icon icon=\"save\" size=\"small\" onClick={() => onSave(getModifiedDiff(configRoot))} />\n          <Icon icon=\"refresh\" size=\"small\" onClick={onRefresh} />\n        </IconGroup>\n      </Heading>\n      <table>\n        <tbody>\n          {\n            sortedKeys.map((key) => (\n              <CustomVariable\n                key={key}\n                name={key}\n                value={configRoot.__value[key].__value || {}}\n                onChange={\n                  (newValue) => {\n                    onChange({\n                      __type: VariableType.CUSTOM,\n                      __value: {\n                        [key]: newValue\n                      }\n                    });\n                  }\n                } \n                onSave={\n                  (newValue) => {\n                    onSave({\n                      __type: VariableType.CUSTOM,\n                      __value: {\n                        [key]: newValue\n                      }\n                    });\n                  }\n                } />\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nConfigView.propTypes = {\n  configRoot: PropTypes.object.isRequired,\n  onRefresh: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = ({ config }) => config;\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRefresh: () => {\n    dispatch(refreshConfig());\n  },\n  onSave: (configDiff) => {\n    dispatch(saveConfig(configDiff));\n  },\n  onChange: (configDiff) => {\n    dispatch(updateConfig(configDiff));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigView);\n","import VariableType from '../enums/VariableType';\n\nexport const RECEIVE_CONFIG = 'RECEIVE_CONFIG';\nexport const GET_CONFIG = 'GET_CONFIG';\nexport const UPDATE_CONFIG = 'UPDATE_CONFIG';\nexport const SAVE_CONFIG = 'SAVE_CONFIG';\nexport const REFRESH_CONFIG = 'REFRESH_CONFIG';\n\nexport const receiveConfig = (config) => ({\n  type: RECEIVE_CONFIG,\n  config\n});\n\nexport const getConfig = () => ({\n  type: GET_CONFIG\n});\n\nexport const updateConfig = (configDiff) => ({\n  type: UPDATE_CONFIG,\n  configDiff\n});\n\nexport const saveConfig = (configDiff) => ({\n  type: SAVE_CONFIG,\n  configDiff\n});\n\nexport const refreshConfig = () => ({\n  type: REFRESH_CONFIG\n});\n\nexport const getModifiedDiff = (baseConfig, root = true) => {\n  if (baseConfig.__type === VariableType.CUSTOM) {\n    const modifiedConfig = {\n      __type: VariableType.CUSTOM,\n      __value: {}\n    };\n    for (let key of Object.keys(baseConfig.__value)) {\n      const subConfig = getModifiedDiff(baseConfig.__value[key], false);\n      if (subConfig) {\n        modifiedConfig.__value[key] = subConfig;\n      }\n    }\n    if (Object.entries(modifiedConfig.__value).length > 0 || root) {\n      return modifiedConfig;\n    }\n  } else if (baseConfig.__modified && baseConfig.__valid) {\n    return {\n      __type: baseConfig.__type,\n      __value: baseConfig.__newValue,\n      __valid: true,\n      __enumClass: baseConfig.__enumClass\n    };\n  }\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport Heading from '../components/Heading';\nimport { telemetryType } from './types';\n\nconst TelemetryView = ({ telemetry }) => {\n  const latestPacket = telemetry[telemetry.length - 1];\n  const telemetryLines = Object.keys(latestPacket.data)\n    .map(key => (\n      <span key={key}>\n        {key}: {latestPacket.data[key]}\n        <br />\n      </span>\n    ));\n  const telemetryLog = latestPacket.log.map((line, i) => (\n    <span key={i}>{line}<br /></span>\n  ));\n  return (\n    <div>\n      <Heading level={2} text=\"Telemetry\" />\n      <p>{telemetryLines}</p>\n      <p>{telemetryLog}</p>\n    </div>\n  );\n};\n\nTelemetryView.propTypes = {\n  telemetry: telemetryType.isRequired\n};\n\nconst mapStateToProps = ({ telemetry }) => ({\n  telemetry\n});\n\nexport default connect(mapStateToProps)(TelemetryView);\n","import { cloneDeep } from 'lodash';\nimport './canvas';\nimport fieldImageName from '../assets/field.png';\n\n// this is a bit of a hack bit it'll have to do\n// it's much better than sticking field renders in requestAnimationFrame()\nconst fieldImage = new Image();\nconst fieldsToRender = [];\nlet fieldLoaded = false;\nfieldImage.onload = function() {\n  fieldLoaded = true;\n  fieldsToRender.forEach(field => field.render());\n};\nfieldImage.src = fieldImageName;\n\n// all dimensions in this file are *CSS* pixels unless otherwise stated\nconst DEFAULT_OPTIONS = {\n  padding: 15,\n  alpha: 0.25,\n  fieldSize: 12 * 12, // inches\n  splineSamples: 250,\n  gridLineWidth: 1, // device pixels\n  gridLineColor: 'rgb(120, 120, 120)'\n};\n\nexport default class Field {\n  constructor(canvas, options) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n\n    this.options = cloneDeep(DEFAULT_OPTIONS);\n    Object.assign(this.options, options || {});\n\n    this.overlay = {\n      ops: [],\n    };\n  }\n\n  setOverlay(overlay) {\n    this.overlay = overlay;\n  }\n\n  render() {\n    // eslint-disable-next-line\n    this.canvas.width = this.canvas.width; // clears the canvas\n\n    // scale the canvas to facilitate the use of CSS pixels\n    this.ctx.scale(devicePixelRatio, devicePixelRatio);\n\n    const width = this.canvas.width / devicePixelRatio;\n    const height = this.canvas.height / devicePixelRatio;\n    const smallerDim = width < height ? width : height;\n    const fieldSize = smallerDim - 2 * this.options.padding;\n\n    if (!fieldLoaded && fieldsToRender.indexOf(this) === -1) {\n      fieldsToRender.push(this);\n    }\n\n    this.renderField(\n      (width - fieldSize) / 2,\n      (height - fieldSize) / 2,\n      fieldSize, fieldSize\n    );\n  }\n\n  renderField(x, y, width, height) {\n    this.ctx.save();\n    this.ctx.globalAlpha = this.options.alpha;\n    this.ctx.drawImage(fieldImage, x, y, width, height);\n    this.ctx.restore();\n\n    this.renderGridLines(x, y, width, height, 7, 7);\n    this.renderOverlay(x, y, width, height);\n  }\n\n  renderGridLines(x, y, width, height, numTicksX, numTicksY) {\n    this.ctx.save();\n\n    this.ctx.strokeStyle = this.options.gridLineColor;\n    this.ctx.lineWidth = this.options.gridLineWidth / devicePixelRatio;\n\n    const horSpacing = width / (numTicksX - 1);\n    const vertSpacing = height / (numTicksY - 1);\n\n    for (let i = 0; i < numTicksX; i++) {\n      const lineX = x + horSpacing * i;\n      this.ctx.beginPath();\n      this.ctx.fineMoveTo(lineX, y);\n      this.ctx.fineLineTo(lineX, y + height);\n      this.ctx.stroke();\n    }\n\n    for (let i = 0; i < numTicksY; i++) {\n      const lineY = y + vertSpacing * i;\n      this.ctx.beginPath();\n      this.ctx.fineMoveTo(x, lineY);\n      this.ctx.fineLineTo(x + width, lineY);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  renderOverlay(x, y, width, height) {\n    const o = this.options;\n\n    this.ctx.save();\n    this.ctx.translate(x + width / 2, y + height / 2);\n    this.ctx.scale(width / o.fieldSize, -height / o.fieldSize);\n    this.ctx.rotate(Math.PI / 2);\n\n    this.ctx.lineCap = 'butt';\n\n    this.overlay.ops.forEach((op) => {\n      switch (op.type) {\n      case 'fill':\n        this.ctx.fillStyle = op.color;\n        break;\n      case 'stroke':\n        this.ctx.strokeStyle = op.color;\n        break;\n      case 'strokeWidth':\n        this.ctx.lineWidth = op.width;\n        break;\n      case 'circle':\n        this.ctx.beginPath();\n        this.ctx.arc(op.x, op.y, op.radius, 0, 2 * Math.PI);\n\n        if (op.stroke) {\n          this.ctx.stroke();\n        } else {\n          this.ctx.fill();\n        }\n        break;\n      case 'polygon': {\n        this.ctx.beginPath();\n        const { xPoints, yPoints, stroke } = op;\n        this.ctx.fineMoveTo(xPoints[0], yPoints[0]);\n        for (let i = 1; i < xPoints.length; i++) {\n          this.ctx.fineLineTo(xPoints[i], yPoints[i]);\n        }\n        this.ctx.closePath();\n\n        if (stroke) {\n          this.ctx.stroke();\n        } else {\n          this.ctx.fill();\n        }\n        break;\n      }\n      case 'polyline': {\n        this.ctx.beginPath();\n        const { xPoints, yPoints } = op;\n        this.ctx.fineMoveTo(xPoints[0], yPoints[0]);\n        for (let i = 1; i < xPoints.length; i++) {\n          this.ctx.fineLineTo(xPoints[i], yPoints[i]);\n        }\n        this.ctx.stroke();\n        break;\n      }\n      case 'spline': {\n        this.ctx.beginPath();\n        const { ax, bx, cx, dx, ex, fx, ay, by, cy, dy, ey, fy } = op;\n        this.ctx.fineMoveTo(fx, fy);\n        for (let i = 0; i <= o.splineSamples; i++) {\n          const t = i  / o.splineSamples;\n          const sx = (ax*t + bx) * (t*t*t*t) + cx * (t*t*t) + dx * (t*t) + ex * t + fx;\n          const sy = (ay*t + by) * (t*t*t*t) + cy * (t*t*t) + dy * (t*t) + ey * t + fy;\n\n          this.ctx.lineTo(sx, sy);\n        }\n        this.ctx.stroke();\n        break;\n      }\n      default:\n        throw new Error(`unknown operation: ${op.type}`);\n      }\n    });\n\n    this.ctx.restore();\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Field from './Field';\nimport Heading from '../components/Heading';\nimport AutoFitCanvas from '../components/AutoFitCanvas';\n\nclass FieldView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n\n    this.renderField = this.renderField.bind(this);\n  }\n\n  componentDidMount() {\n    this.field = new Field(this.canvasRef.current);\n    this.renderField();\n  }\n\n  componentDidUpdate() {\n    this.field.setOverlay(this.props.overlay);\n    this.renderField();\n  }\n\n  renderField() {\n    if (this.field) {\n      this.field.render();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Heading level={2} text=\"Field\" />\n        <div className=\"canvas-container\">\n          <AutoFitCanvas ref={this.canvasRef} onResize={this.renderField} />\n        </div>\n      </div>\n    );\n  }\n}\n\nFieldView.propTypes = {\n  overlay: PropTypes.shape({\n    ops: PropTypes.array.isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = ({ telemetry }) => ({\n  overlay: telemetry[telemetry.length - 1].fieldOverlay\n});\n\nexport default connect(mapStateToProps)(FieldView);\n","import React from 'react';\nimport TileGrid from '../components/TileGrid';\nimport Tile from '../components/Tile';\nimport OpModeView from '../containers/OpModeView';\nimport CameraView from '../containers/CameraView';\nimport GraphView from '../containers/GraphView';\nimport ConfigView from '../containers/ConfigView';\nimport TelemetryView from '../containers/TelemetryView';\nimport FieldView from '../containers/FieldView';\n\nconst LayoutPreset = {\n  DEFAULT: 'DEFAULT',\n  FIELD: 'FIELD',\n  GRAPH: 'GRAPH',\n  ORIGINAL: 'ORIGINAL',\n};\n\nconst LAYOUT_DETAILS = {\n  [LayoutPreset.DEFAULT]: {\n    name: 'Default',\n    content: (\n      <TileGrid gridTemplate=\"150px calc(60% - 150px) 40% / 30% 40% 30%\">\n        <Tile row={1} col={1}>\n          <OpModeView />\n        </Tile>\n        <Tile row=\"2 / span 2\" col={1}>\n          <CameraView />\n        </Tile>\n        <Tile row=\"1 / span 3\" col={2}>\n          <GraphView />\n        </Tile>=\n        <Tile row=\"1 / span 2\" col={3}>\n          <ConfigView />\n        </Tile>\n        <Tile row={3} col={3}>\n          <TelemetryView />\n        </Tile>\n      </TileGrid>\n    )\n  },\n  [LayoutPreset.FIELD]: {\n    name: 'Field',\n    content: (\n      <TileGrid gridTemplate=\"150px calc(60% - 150px) 40% / 30% 40% 30%\">\n        <Tile row={1} col={1}>\n          <OpModeView />\n        </Tile>\n        <Tile row=\"2 / span 2\" col={1}>\n          <FieldView />\n        </Tile>\n        <Tile row=\"1 / span 3\" col={2}>\n          <GraphView />\n        </Tile>=\n        <Tile row=\"1 / span 2\" col={3}>\n          <ConfigView />\n        </Tile>\n        <Tile row={3} col={3}>\n          <TelemetryView />\n        </Tile>\n      </TileGrid>\n    )\n  },\n  [LayoutPreset.GRAPH]: {\n    name: 'Graph',\n    content: (\n      <TileGrid gridTemplate=\"100% / 50% 50%\">\n        <Tile row={1} col={1}>\n          <GraphView />\n        </Tile>\n        <Tile row={1} col={2}>\n          <GraphView />\n        </Tile>\n      </TileGrid>\n    )\n  },\n  [LayoutPreset.ORIGINAL]: {\n    name: 'Original',\n    content: (\n      <TileGrid gridTemplate=\"60% 40% / 65% 35%\">\n        <Tile row=\"1 / span 2\" col={1}>\n          <GraphView />\n        </Tile>=\n        <Tile row={1} col={2}>\n          <ConfigView />\n        </Tile>\n        <Tile row={2} col={2}>\n          <TelemetryView />\n        </Tile>\n      </TileGrid>\n    )\n  }\n};\n\nexport default Object.freeze({\n  ...LayoutPreset,\n  \n  getName: (preset) => LAYOUT_DETAILS[preset].name,\n\n  getContent: (preset) => LAYOUT_DETAILS[preset].content\n});\n","import { isEqual } from 'lodash';\n\nexport const GAMEPAD_CONNECTED = 'GAMEPAD_CONNECTED';\nexport const GAMEPAD_DISCONNECTED = 'GAMEPAD_DISCONNECTED';\nexport const RECEIVE_GAMEPAD_STATE = 'RECEIVE_GAMEPAD_STATE';\n\nexport const gamepadConnected = (user) => ({\n  type: GAMEPAD_CONNECTED,\n  user\n});\n\nexport const gamepadDisconnected = (user) => ({\n  type: GAMEPAD_DISCONNECTED,\n  user\n});\n\nexport const receiveGamepadState = (gamepad1, gamepad2) => ({\n  type: RECEIVE_GAMEPAD_STATE,\n  gamepad1,\n  gamepad2\n});\n\n/*\nTo save bandwidth, new gamepad states are only sent if they differ from the previous.\nHowever, the dash regardless still sends gamepad messages at the rate below to feed\nthe watchdog on the RC (to reset the gamepads in case the connection is cut abruptly).\n*/\nconst MAX_GAMEPAD_MS = 150;\n\nlet lastGamepad1, lastGamepad2;\nlet lastGamepadTimestamp;\n\nexport const sendGamepadState = (gamepad1, gamepad2) => (\n  (dispatch) => {\n    const timestamp = Date.now();\n    if (!isEqual(lastGamepad1, gamepad1) || !isEqual(lastGamepad2, gamepad2) || \n        (timestamp - lastGamepadTimestamp) < MAX_GAMEPAD_MS) {\n      dispatch(receiveGamepadState(gamepad1, gamepad2));\n      \n      lastGamepad1 = gamepad1;\n      lastGamepad2 = gamepad2;\n      lastGamepadTimestamp = timestamp;\n    }\n  }\n);","import { receiveOpModeList } from './status';\n\nexport const CONNECT = 'CONNECT';\nexport const DISCONNECT = 'DISCONNECT';\nexport const RECEIVE_PING_TIME = 'RECEIVE_PING_TIME';\nexport const RECEIVE_CONNECTION_STATUS = 'RECEIVE_CONNECTION_STATUS';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\n\nexport const connect = (host, port) => ({\n  type: CONNECT,\n  host,\n  port\n});\n\nexport const disconnect = () => ({\n  type: DISCONNECT\n});\n\nexport const receivePingTime = (pingTime) => ({\n  type: RECEIVE_PING_TIME,\n  pingTime\n});\n\nexport const receiveConnectionStatus = (isConnected) => (\n  (dispatch) => {\n    dispatch({\n      type: RECEIVE_CONNECTION_STATUS,\n      isConnected\n    });\n\n    if (!isConnected) {\n      dispatch(receiveOpModeList([]));\n    }\n  }\n);","export const GET_ROBOT_STATUS = 'GET_ROBOT_STATUS';\nexport const RECEIVE_ROBOT_STATUS = 'RECEIVE_ROBOT_STATUS';\nexport const RECEIVE_OP_MODE_LIST = 'RECEIVE_OP_MODE_LIST';\n\nexport const getRobotStatus = () => ({\n  type: GET_ROBOT_STATUS\n});\n\nexport const receiveRobotStatus = (status) => ({\n  type: RECEIVE_ROBOT_STATUS,\n  status\n});\n\nexport const receiveOpModeList = (opModeList) => ({\n  type: RECEIVE_OP_MODE_LIST,\n  opModeList\n});","export const SAVE_LAYOUT_PRESET = 'SAVE_LAYOUT_PRESET';\nexport const RECEIVE_LAYOUT_PRESET = 'RECEIVE_LAYOUT_PRESET';\nexport const GET_LAYOUT_PRESET = 'GET_LAYOUT_PRESET';\n\nexport const saveLayoutPreset = (preset) => ({\n  type: SAVE_LAYOUT_PRESET,\n  preset\n});\n\nexport const receiveLayoutPreset = (preset) => ({\n  type: RECEIVE_LAYOUT_PRESET,\n  preset\n});\n\nexport const getLayoutPreset = () => ({\n  type: GET_LAYOUT_PRESET\n});","import React, { Component } from 'react';\nimport { connect as reduxConnect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Heading from '../components/Heading';\nimport Header from '../components/Header';\nimport IconGroup from '../components/IconGroup';\nimport Icon from '../components/Icon';\nimport LayoutPreset from '../enums/LayoutPreset';\nimport { connect, disconnect } from '../actions/socket';\nimport { saveLayoutPreset, getLayoutPreset } from '../actions/settings';\n\nclass Dashboard extends Component {\n  componentDidMount() {\n    this.props.dispatch(connect(process.env.REACT_APP_HOST || window.location.hostname, process.env.REACT_APP_PORT));\n    this.props.dispatch(getLayoutPreset());\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(disconnect());\n  }\n\n  render() {\n    return (\n      <div>\n        <Header>\n          <Heading text=\"FTC Dashboard\" level={1}>\n            <IconGroup>\n              <select \n                style={{ margin: '0px 8px 0px 8px' }}\n                value={this.props.layoutPreset} \n                onChange={evt => this.props.dispatch(saveLayoutPreset(evt.target.value))}>\n                {\n                  Object.keys(LayoutPreset)\n                    .filter((key) => typeof LayoutPreset[key] == 'string')\n                    .map((key) => (\n                      <option key={key} value={key}>{LayoutPreset.getName(key)}</option>\n                    ))\n                }\n              </select>\n              {\n                this.props.isConnected ?\n                  <p style={{ width: '60px', margin: '0px 8px 0px 8px', textAlign: 'right' }}>{this.props.pingTime}ms</p>\n                  : null\n              }\n              <Icon icon={this.props.isConnected ? 'wifi' : 'no-wifi'} size=\"large\" />\n            </IconGroup>\n          </Heading>\n        </Header>\n        { LayoutPreset.getContent(this.props.layoutPreset) }\n      </div>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  isConnected: PropTypes.bool.isRequired,\n  pingTime: PropTypes.number.isRequired,\n  layoutPreset: PropTypes.oneOf(Object.keys(LayoutPreset)).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = ({ socket, settings }) => ({\n  isConnected: socket.isConnected,\n  pingTime: socket.pingTime,\n  layoutPreset: settings.layoutPreset\n});\n\nexport default reduxConnect(mapStateToProps)(Dashboard);\n","/*\nThe gamepad mappings have been tested with the following devices:\n  - 46d-c216-Logitech Dual Action\n  - 46d-c21d-Xbox 360 Wired Controller\n*/\n\nconst GamepadType = {\n  LOGITECH_DUAL_ACTION: 'LOGITECH_DUAL_ACTION',\n  XBOX_360: 'XBOX_360',\n  UNKNOWN: 'UNKNOWN'\n};\n\nexport default Object.freeze({\n  ...GamepadType,\n\n  getFromGamepad: (gamepad) => {\n    if (gamepad.id.search('Logitech Dual Action') !== -1) {\n      return GamepadType.LOGITECH_DUAL_ACTION;\n    } else if (gamepad.id.search('Xbox 360 Wired Controller') !== -1) {\n      return GamepadType.XBOX_360;\n    } else {\n      return GamepadType.UNKNOWN;\n    }\n  },\n\n  getJoystickDeadzone: (gamepadType) => {\n    switch (gamepadType) {\n    case GamepadType.LOGITECH_DUAL_ACTION:\n      return 0.06;\n    case GamepadType.XBOX_360:\n      return 0.15;\n    default:\n      return 0.2;\n    }\n  },\n\n  isSupported: (gamepadType) => \n    gamepadType !== GamepadType.UNKNOWN\n});\n","import {\n  CONNECT,\n  DISCONNECT,\n  connect,\n  receiveConnectionStatus,\n  receivePingTime\n} from '../actions/socket';\nimport {\n  GET_CONFIG,\n  SAVE_CONFIG\n} from '../actions/config';\nimport { \n  GET_ROBOT_STATUS,\n  RECEIVE_ROBOT_STATUS,\n  getRobotStatus\n} from '../actions/status';\nimport {\n  INIT_OP_MODE,\n  START_OP_MODE,\n  STOP_OP_MODE\n} from '../actions/opmode';\nimport {\n  RECEIVE_GAMEPAD_STATE\n} from '../actions/gamepad';\n\nlet socket, statusSentTime;\n\nconst robotStatusLoop = () => (\n  (dispatch, getState) => {\n    const { isConnected } = getState().socket;\n\n    if (!isConnected) {\n      return;\n    }\n\n    statusSentTime = Date.now();\n\n    dispatch(getRobotStatus());\n\n    setTimeout(() => {\n      dispatch(robotStatusLoop());\n    }, 1000);\n  }\n);\n\nconst socketMiddleware = store => next => action => {\n  switch (action.type) {\n  case CONNECT:\n    socket = new WebSocket(`ws://${action.host}:${action.port}`);\n\n    socket.onmessage = (evt) => {\n      const msg = JSON.parse(evt.data);\n      store.dispatch(msg);\n    };\n\n    socket.onopen = () => {\n      store.dispatch(receiveConnectionStatus(true));\n\n      store.dispatch(robotStatusLoop());\n    };\n\n    socket.onclose = () => {\n      store.dispatch(receiveConnectionStatus(false));\n\n      setTimeout(() => store.dispatch(connect(action.host, action.port)), 500);\n    };\n\n    break;\n  case DISCONNECT:\n    socket.close();\n    break;\n  case RECEIVE_ROBOT_STATUS: {\n    const pingTime = Date.now() - statusSentTime;\n    store.dispatch(receivePingTime(pingTime));\n    next(action);\n    break;\n  }\n  // messages forwarded to the server\n  case RECEIVE_GAMEPAD_STATE:\n  case GET_ROBOT_STATUS:\n  case SAVE_CONFIG:\n  case GET_CONFIG: \n  case INIT_OP_MODE:\n  case START_OP_MODE:\n  case STOP_OP_MODE: {\n    const { isConnected } = store.getState().socket;\n\n    if (isConnected) {\n      socket.send(JSON.stringify(action));\n    }\n\n    next(action);\n\n    break;\n  }\n  default:\n    next(action);\n\n    break;\n  }\n};\n\nexport default socketMiddleware;\n","/*\n * Some of this gamepad logic is based on FTC Team 731's robotics simulator.\n * https://github.com/nicholasday/robotics-simulator\n */\n\nimport {\n  gamepadConnected,\n  gamepadDisconnected,\n  sendGamepadState\n} from '../actions/gamepad';\nimport GamepadType from '../enums/GamepadType';\n\nconst scale = (value, oldMin, oldMax, newMin, newMax) =>\n  newMin + (value - oldMin) * (newMax - newMin) / (oldMax - oldMin);\n\n// based on the corresponding function in the SDK Gamepad\nconst cleanMotionValues = (value, joystickDeadzone, maxMotionRange) => {\n  joystickDeadzone = joystickDeadzone || 0.2;\n  maxMotionRange = maxMotionRange || 1.0;\n\n  // apply deadzone\n  if (-joystickDeadzone < value && value < joystickDeadzone) return 0;\n\n  // apply trim\n  if (value > maxMotionRange) return maxMotionRange;\n  if (value < -maxMotionRange) return maxMotionRange;\n\n  // scale values between deadzone and trim to 0 and max range\n  if (value > 0) {\n    return scale(value, joystickDeadzone, maxMotionRange, 0, maxMotionRange);\n  } else {\n    return scale(value, -joystickDeadzone, -maxMotionRange, 0, -maxMotionRange);\n  }\n};\n\nconst REST_GAMEPAD_STATE = {\n  left_stick_x: 0,\n  left_stick_y: 0,\n  right_stick_x: 0,\n  right_stick_y: 0,\n  dpad_up: false,\n  dpad_down: false,\n  dpad_left: false,\n  dpad_right: false,\n  a: false,\n  b: false,\n  x: false,\n  y: false,\n  guide: false,\n  start: false,\n  back: false,\n  left_bumper: false,\n  right_bumper: false,\n  left_stick_button: false,\n  right_stick_button: false,\n  left_trigger: 0,\n  right_trigger: 0\n};\n\nconst extractGamepadState = (gamepad) => {\n  const type = GamepadType.getFromGamepad(gamepad);\n  if (!GamepadType.isSupported(type)) {\n    throw new Error('Unable to extract state from unsupported gamepad.');\n  }\n\n  switch (type) {\n  case GamepadType.LOGITECH_DUAL_ACTION:\n    return {\n      left_stick_x: cleanMotionValues(-gamepad.axes[1]),\n      left_stick_y: cleanMotionValues(gamepad.axes[2]),\n      right_stick_x: cleanMotionValues(-gamepad.axes[3]),\n      right_stick_y: cleanMotionValues(gamepad.axes[4]),\n      dpad_up: gamepad.buttons[12].pressed,\n      dpad_down: gamepad.buttons[13].pressed,\n      dpad_left: gamepad.buttons[14].pressed,\n      dpad_right: gamepad.buttons[15].pressed,\n      a: gamepad.buttons[1].pressed,\n      b: gamepad.buttons[2].pressed,\n      x: gamepad.buttons[0].pressed,\n      y: gamepad.buttons[3].pressed,\n      guide: false,\n      start: gamepad.buttons[9].pressed,\n      back: gamepad.buttons[8].pressed,\n      left_bumper: gamepad.buttons[4].pressed,\n      right_bumper: gamepad.buttons[5].pressed,\n      left_stick_button: gamepad.buttons[10].pressed,\n      right_stick_button: gamepad.buttons[11].pressed,\n      left_trigger: gamepad.buttons[6].value,\n      right_trigger: gamepad.buttons[7].value\n    };\n  case GamepadType.XBOX_360:\n    return {\n      left_stick_x: cleanMotionValues(gamepad.axes[0]),\n      left_stick_y: cleanMotionValues(-gamepad.axes[1]),\n      right_stick_x: cleanMotionValues(gamepad.axes[3]),\n      right_stick_y: cleanMotionValues(-gamepad.axes[4]),\n      dpad_up: gamepad.buttons[0].pressed,\n      dpad_down: gamepad.buttons[1].pressed,\n      dpad_left: gamepad.buttons[2].pressed,\n      dpad_right: gamepad.buttons[3].pressed,\n      a: gamepad.buttons[11].pressed,\n      b: gamepad.buttons[12].pressed,\n      x: gamepad.buttons[13].pressed,\n      y: gamepad.buttons[14].pressed,\n      guide: false,\n      start: gamepad.buttons[4].pressed,\n      back: gamepad.buttons[5].pressed,\n      left_bumper: gamepad.buttons[8].pressed,\n      right_bumper: gamepad.buttons[9].pressed,\n      left_stick_button: gamepad.buttons[6].pressed,\n      right_stick_button: gamepad.buttons[7].pressed,\n      // the trigger range is [-1, 1] although it starts at 0.0 for some reason\n      left_trigger: gamepad.axes[2] === 0.0 ? 0.0 : (gamepad.axes[2] + 1) / 2,\n      right_trigger: gamepad.axes[5] === 0.0 ? 0.0 : (gamepad.axes[5] + 1) / 2\n    };\n  default:\n    throw new Error(`Unable to handle support gamepad of type ${type}`);\n  }\n};\n\nlet gamepad1Index = -1;\nlet gamepad2Index = -1;\n\nconst gamepadMiddleware = store => {\n  function updateGamepads() {\n    const gamepads = navigator.getGamepads();\n    if (gamepads.length === 0) {\n      setTimeout(updateGamepads, 500);\n      return;\n    }\n  \n    // check for Start-A/Start-B\n    for (let gamepad of navigator.getGamepads()) {\n      if (gamepad === null || !gamepad.connected) {\n        continue;\n      }\n  \n      const gamepadType = GamepadType.getFromGamepad(gamepad);\n      if (!GamepadType.isSupported(gamepadType)) {\n        continue;\n      }\n  \n      const gamepadState = extractGamepadState(gamepad);\n      \n      // update gamepad 1 & 2 associations\n      if (gamepadState.start && gamepadState.a) {\n        gamepad1Index = gamepad.index;\n        \n        store.dispatch(gamepadConnected(1));\n  \n        if (gamepad2Index === gamepad1Index) {\n          store.dispatch(gamepadDisconnected(2));\n\n          gamepad2Index = -1;\n        }\n      } else if (gamepadState.start && gamepadState.b) {\n        gamepad2Index = gamepad.index;\n  \n        store.dispatch(gamepadConnected(2));\n  \n        if (gamepad1Index === gamepad2Index) {\n          store.dispatch(gamepadDisconnected(1));\n\n          gamepad1Index = -1;\n        }\n      }\n  \n      // actually dispatch motion events\n      let gamepad1State;\n      if (gamepad1Index !== -1) {\n        gamepad1State = extractGamepadState(gamepads[gamepad1Index], 1);\n      } else {\n        gamepad1State = REST_GAMEPAD_STATE;\n      }\n      \n      let gamepad2State;\n      if (gamepad2Index !== -1) {\n        gamepad2State = extractGamepadState(gamepads[gamepad2Index], 2);\n      } else {\n        gamepad2State = REST_GAMEPAD_STATE;\n      }\n\n      store.dispatch(sendGamepadState(gamepad1State, gamepad2State));\n    }\n  \n    requestAnimationFrame(updateGamepads);\n  }\n\n  window.addEventListener('gamepaddisconnected', ({ gamepad }) => {\n    if (gamepad1Index === gamepad.index) {\n      store.dispatch(gamepadDisconnected(gamepad1Index));\n      \n      gamepad1Index = -1;\n    } else if (gamepad2Index === gamepad.index) {\n      store.dispatch(gamepadDisconnected(gamepad2Index));\n\n      gamepad2Index = -1;\n    }\n  });\n\n  updateGamepads();\n\n  return next => action => next(action);\n};\n\nexport default gamepadMiddleware;","import {\n  GET_LAYOUT_PRESET,\n  SAVE_LAYOUT_PRESET,\n  receiveLayoutPreset\n} from '../actions/settings';\nimport LayoutPreset from '../enums/LayoutPreset';\n\nconst LAYOUT_PRESET_KEY = 'layoutPreset';\n\nconst storageMiddleware = store => next => action => {\n  switch (action.type) {\n  case GET_LAYOUT_PRESET: {\n    const preset = localStorage.getItem(LAYOUT_PRESET_KEY) || LayoutPreset.DEFAULT;\n\n    store.dispatch(receiveLayoutPreset(preset));\n\n    break;\n  }\n  case SAVE_LAYOUT_PRESET: {\n    localStorage.setItem(LAYOUT_PRESET_KEY, action.preset);\n\n    store.dispatch(receiveLayoutPreset(action.preset));\n\n    break;\n  }\n  default:\n    next(action);\n\n    break;\n  }\n};\n\nexport default storageMiddleware;\n","import { RECEIVE_TELEMETRY } from '../actions/telemetry';\n\nconst initialState = [{\n  timestamp: 0,\n  data: {},\n  log: [],\n  fieldOverlay: {\n    ops: []\n  }\n}];\n\nconst telemetry = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_TELEMETRY:\n    return action.telemetry;\n  default:\n    return state;\n  }\n};\n\nexport default telemetry;\n","export const RECEIVE_TELEMETRY = 'RECEIVE_TELEMETRY';\n\nexport const receiveTelemetry = (telemetry) => ({\n  type: RECEIVE_TELEMETRY,\n  telemetry\n});\n","import {\n  RECEIVE_PING_TIME,\n  RECEIVE_CONNECTION_STATUS\n} from '../actions/socket';\n\nconst initialState = {\n  isConnected: false,\n  pingTime: 0\n};\n\nconst socket = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_PING_TIME:\n    return {\n      ...state,\n      pingTime: action.pingTime\n    };\n  case RECEIVE_CONNECTION_STATUS:\n    return {\n      ...state,\n      isConnected: action.isConnected\n    };\n  default:\n    return state;\n  }\n};\n\nexport default socket;\n","import { cloneDeep } from 'lodash';\nimport { \n  RECEIVE_CONFIG, \n  UPDATE_CONFIG,\n  SAVE_CONFIG,\n  REFRESH_CONFIG\n} from '../actions/config';\nimport VariableType from '../enums/VariableType';\n\nconst receiveConfig = (baseConfig, newConfig) => {\n  baseConfig = baseConfig || {};\n  baseConfig.__value = baseConfig.__value || {};\n  if (newConfig.__type === VariableType.CUSTOM) {\n    const mergedConfig = {\n      __type: VariableType.CUSTOM,\n      __value: {}\n    };\n    // iterate over the keys in the new config\n    // we treat this as the master config; it's from the server\n    for (let key of Object.keys(newConfig.__value)) {\n      mergedConfig.__value[key] = receiveConfig(\n        baseConfig.__value[key] || {}, newConfig.__value[key]);\n    }\n    return mergedConfig;\n  } else {\n    if (baseConfig.__modified) {\n      return {\n        __type: newConfig.__type,\n        __value: newConfig.__value,\n        __newValue: baseConfig.__newValue,\n        __valid: baseConfig.__valid,\n        __modified: true,\n        __enumClass: newConfig.__enumClass,\n        __enumValues: newConfig.__enumValues\n      };\n    } else {\n      return {\n        __type: newConfig.__type,\n        __value: newConfig.__value,\n        __newValue: newConfig.__value,\n        __valid: true,\n        __modified: false,\n        __enumClass: newConfig.__enumClass,\n        __enumValues: newConfig.__enumValues\n      };\n    }\n  }\n};\n\nconst updateConfig = (baseConfig, configDiff, modified) => {\n  if (baseConfig.__type === VariableType.CUSTOM) {\n    const mergedConfig = {\n      __type: VariableType.CUSTOM,\n      __value: {}\n    };\n    // iterate over the base config keys; the diff\n    // is only a subset of those\n    for (let key of Object.keys(baseConfig.__value)) {\n      if (key in configDiff.__value) {\n        // if the config diff has the key, recurse\n        mergedConfig.__value[key] = updateConfig(\n          baseConfig.__value[key], configDiff.__value[key], modified);\n      } else {\n        // otherwise just clone the base config\n        mergedConfig.__value[key] = cloneDeep(baseConfig.__value[key]);\n      }\n    }\n    return mergedConfig;\n  } else {\n    // update the value based on the config diff\n    return {\n      __type: baseConfig.__type,\n      __value: baseConfig.__value,\n      __newValue: configDiff.__value,\n      __valid: configDiff.__valid,\n      __modified: modified,\n      __enumClass: baseConfig.__enumClass,\n      __enumValues: baseConfig.__enumValues\n    };\n  }\n};\n\nconst refreshConfig = (config) => {\n  if (config.__type === VariableType.CUSTOM) {\n    const refreshedConfig = {\n      __type: VariableType.CUSTOM,\n      __value: {}\n    };\n    for (let key of Object.keys(config.__value)) {\n      refreshedConfig.__value[key] = refreshConfig(config.__value[key]);\n    }\n    return refreshedConfig;\n  } else {\n    return {\n      __type: config.__type,\n      __value: config.__value,\n      __newValue: config.__value,\n      __valid: true,\n      __modified: false,\n      __enumClass: config.__enumClass,\n      __enumValues: config.__enumValues\n    };\n  }\n};\n\nconst initialState = {\n  configRoot: {}\n};\n\nconst config = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_CONFIG:\n    return {\n      ...state,\n      configRoot: receiveConfig(state.configRoot, action.configRoot)\n    };\n  case UPDATE_CONFIG:\n    return {\n      ...state,\n      configRoot: updateConfig(state.configRoot, action.configDiff, true)\n    };\n  case SAVE_CONFIG:\n    return {\n      ...state,\n      configRoot: updateConfig(state.configRoot, action.configDiff, false)\n    };\n  case REFRESH_CONFIG:\n    return {\n      ...state,\n      configRoot: refreshConfig(state.configRoot)\n    };\n  default:\n    return state;\n  }\n};\n\nexport default config;\n","import { RECEIVE_ROBOT_STATUS, RECEIVE_OP_MODE_LIST } from '../actions/status';\nimport OpModeStatus from '../enums/OpModeStatus';\n\nconst initialState = {\n  available: false,\n  activeOpMode: '',\n  activeOpModeStatus: OpModeStatus.STOPPED,\n  opModeList: [],\n  warningMessage: '',\n  errorMessage: ''\n};\n\nconst telemetry = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_ROBOT_STATUS:\n    return {\n      ...state,\n      ...action.status\n    };\n  case RECEIVE_OP_MODE_LIST:\n    return {\n      ...state,\n      opModeList: action.opModeList\n    };\n  default:\n    return state;\n  }\n};\n\nexport default telemetry;\n","import { RECEIVE_IMAGE } from '../actions/camera';\n\nconst initialState = {\n  imageStr: ''\n};\n\nconst telemetry = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_IMAGE:\n    return {\n      ...state,\n      imageStr: action.imageString\n    };\n  default:\n    return state;\n  }\n};\n\nexport default telemetry;\n","export const RECEIVE_IMAGE = 'RECEIVE_IMAGE';\n\nexport const receiveImage = (imageString) => ({\n  type: RECEIVE_IMAGE,\n  imageString\n});","import LayoutPreset from '../enums/LayoutPreset';\nimport { RECEIVE_LAYOUT_PRESET } from '../actions/settings';\n\nconst initialState = {\n  layoutPreset: LayoutPreset.DEFAULT\n};\n\nconst telemetry = (state = initialState, action) => {\n  switch (action.type) {\n  case RECEIVE_LAYOUT_PRESET:\n    return {\n      ...state,\n      layoutPreset: action.preset\n    };\n  default:\n    return state;\n  }\n};\n\nexport default telemetry;","import { \n  GAMEPAD_CONNECTED,\n  GAMEPAD_DISCONNECTED\n} from '../actions/gamepad';\n\nconst initialState = {\n  gamepad1Connected: false,\n  gamepad2Connected: false\n};\n\nconst gamepad = (state = initialState, action) => {\n  switch (action.type) {\n  case GAMEPAD_CONNECTED:\n    if (action.user === 1) {\n      return {\n        ...state,\n        gamepad1Connected: true\n      };\n    } else {\n      return {\n        ...state,\n        gamepad2Connected: true\n      };\n    }\n  case GAMEPAD_DISCONNECTED:\n    if (action.user === 1) {\n      return {\n        ...state,\n        gamepad1Connected: false\n      };\n    } else {\n      return {\n        ...state,\n        gamepad2Connected: false\n      };\n    }\n  default:\n    return state;\n  }\n};\n\nexport default gamepad;\n","import { combineReducers } from 'redux';\nimport telemetry from './telemetry';\nimport socket from './socket';\nimport config from './config';\nimport status from './status';\nimport camera from './camera';\nimport settings from './settings';\nimport gamepad from './gamepad';\n\nexport default combineReducers({\n  telemetry,\n  socket,\n  config,\n  status,\n  camera,\n  settings,\n  gamepad\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport gamepadMiddleware from './middleware/gamepadMiddleware';\nimport socketMiddleware from './middleware/socketMiddleware';\nimport storageMiddleware from './middleware/storageMiddleware';\nimport reducer from './reducers';\nimport { RECEIVE_PING_TIME } from './actions/socket';\nimport { RECEIVE_TELEMETRY } from './actions/telemetry';\nimport { RECEIVE_ROBOT_STATUS, GET_ROBOT_STATUS } from './actions/status';\n\nconst HIDDEN_ACTIONS = [RECEIVE_PING_TIME, RECEIVE_TELEMETRY, RECEIVE_ROBOT_STATUS, GET_ROBOT_STATUS];\n\nconst configureStore = () =>  {\n  const middlewares = [thunk, gamepadMiddleware, socketMiddleware, storageMiddleware];\n\n  if (process.env.NODE_ENV === 'development') {\n    const logger = createLogger({\n      predicate: (getState, action) => HIDDEN_ACTIONS.indexOf(action.type) === -1\n    });\n\n    middlewares.push(logger);\n  }\n\n  return createStore(\n    reducer,\n    applyMiddleware.apply(null, middlewares)\n  );\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Dashboard from './containers/Dashboard';\nimport configureStore from './configureStore';\nimport './index.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Dashboard />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}